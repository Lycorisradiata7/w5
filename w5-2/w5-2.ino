const int ledCount = 10;    // the number of LEDs in the bar graph
const int i=0;
int ledPins[] = { 1,2, 3, 4, 5, 6, 7, 13};  
#define fsr_pin A0
//include library
#include <Wire.h>
#include <SPI.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>

//Define Variables
#define OLED_MOSI   11 //D1
#define OLED_CLK   12 //D0
#define OLED_DC    9 //DC
#define OLED_CS    8 //CS
#define OLED_RESET 10 //RES
Adafruit_SSD1306 display(OLED_MOSI, OLED_CLK, OLED_DC, OLED_RESET, OLED_CS);

static const unsigned char PROGMEM Logo[] = {
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x0f,0x80,0x00,0x00,0x00,
  0x00,0x00,0x01,0xff,0xfc,0x00,0x00,0x00,
  0x00,0x01,0xf3,0xff,0xfe,0x7c,0x00,0x00,
  0x00,0x01,0xfb,0xfc,0xff,0x7c,0x00,0x00,
  0x00,0x01,0xfb,0xf0,0x7e,0x7c,0x00,0x00,
  0x00,0x01,0xd8,0xfd,0xfc,0xdc,0x00,0x00,
  0x00,0x00,0xee,0x7f,0xf3,0xbc,0x00,0x00,
  0x00,0x00,0xf3,0x1f,0xe6,0x7c,0x00,0x00,
  0x00,0x00,0xf9,0xcf,0x8c,0xf8,0x00,0x00,
  0x00,0x00,0xee,0xe7,0x1b,0xb8,0x00,0x00,
  0x00,0x00,0xf3,0x68,0x36,0x78,0x00,0x00,
  0x00,0x00,0x7d,0xed,0xbc,0xf0,0x00,0x00,
  0x00,0x00,0x3e,0x7f,0xb3,0xe0,0x00,0x00,
  0x00,0x00,0x0f,0xb7,0xb7,0x80,0x00,0x00,
  0x00,0x00,0x67,0xf7,0x7f,0x30,0x00,0x00,
  0x00,0x00,0x71,0xe7,0x3c,0x70,0x00,0x00,
  0x00,0x00,0x78,0x07,0x00,0x70,0x00,0x00,
  0x00,0x00,0x38,0x07,0x00,0x70,0x00,0x00,
  0x00,0x00,0x3c,0x37,0x61,0xf0,0x00,0x00,
  0x00,0x00,0x3e,0x77,0x73,0xf0,0x00,0x00,
  0x00,0x00,0x3e,0xf7,0x7b,0xf0,0x00,0x00,
  0x00,0x00,0x3e,0xf7,0x7b,0xe0,0x00,0x00,
  0x00,0x00,0x3e,0xf6,0x7b,0xe0,0x00,0x00,
  0x00,0x00,0x3e,0xf0,0x7b,0xe0,0x00,0x00,
  0x00,0x00,0x3e,0xff,0xfb,0xe0,0x00,0x00,
  0x00,0x00,0x1e,0xff,0xfb,0xc0,0x00,0x00,
  0x00,0x00,0x06,0xe0,0x3b,0x00,0x00,0x00,
  0x00,0x00,0x02,0xef,0x3a,0x00,0x00,0x00,
  0x00,0x00,0x00,0xcf,0xb8,0x00,0x00,0x00,
  0x00,0x00,0x00,0x1f,0x80,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
};
static const unsigned char  PROGMEM  Logo1[]= {
  B00000000, B00000000, B00000000, B00000000, B00000000, B00011000, B00000000, B00000000, 
  B00000000, B00000000, B00111111, B00000000, B00000001, B11111110, B00000000, B00000000, 
  B00000000, B00000000, B11111111, B10000000, B00000011, B11111111, B00000000, B00000000, 
  B00000000, B00000001, B11111111, B11000000, B00000011, B11111111, B10000000, B00000000, 
  B00000000, B00000001, B11111111, B11000000, B00000111, B11111111, B10000000, B00000000, 
  B00000000, B00000011, B11111111, B11000000, B00000111, B11111111, B11000000, B00000000, 
  B00000000, B00000011, B11111111, B11100000, B00000111, B11111111, B11000000, B00000000, 
  B00000000, B00000011, B11111111, B11101111, B11111111, B11111111, B11000000, B00000000, 
  B00000000, B00000011, B11111111, B11110111, B11111111, B11111111, B11000000, B00000000, 
  B00000000, B00000111, B11111111, B11100011, B11000111, B11111111, B11000000, B00000000, 
  B00000000, B00000011, B11111111, B11001001, B00010011, B11111111, B10000000, B00000000, 
  B00000000, B00000001, B11111111, B11010000, B00001001, B11111111, B10000000, B00000000, 
  B00000000, B00000001, B11111111, B10000000, B00000001, B11111111, B00000000, B00000000, 
  B00000000, B00000000, B01111111, B10000000, B00000001, B11110100, B00000000, B00000000, 
  B00000000, B00000000, B00000011, B10001000, B01010001, B11000000, B00000000, B00000000, 
  B00000000, B00000000, B00000011, B00001000, B01001001, B11100000, B00000000, B00000000, 
  B00000000, B00000000, B00000111, B10001000, B10000000, B11100000, B00000000, B00000000, 
  B00000000, B00000000, B00000111, B10001010, B11101001, B11100000, B00000000, B00000000, 
  B00000000, B00000000, B00000111, B10001111, B01111001, B11100000, B00000000, B00000000, 
  B00000000, B00000000, B00000111, B10001111, B01110001, B11100000, B00000000, B00000000, 
  B00000000, B00000000, B00000011, B11000111, B11100011, B11100000, B00000000, B00000000, 
  B00000000, B00000000, B00000011, B10000111, B11110000, B01100000, B00000000, B00000000, 
  B00000000, B00000000, B00000010, B11000110, B11110001, B10100000, B00000000, B00000000, 
  B00000000, B00000000, B00000111, B11000111, B11100001, B10100000, B00000000, B00000000, 
  B00000000, B00000000, B00000010, B01000001, B01000010, B01100000, B00000000, B00000000, 
  B00000000, B00000000, B00000010, B00110000, B00000100, B01000000, B00000000, B00000000, 
  B00000000, B00000000, B00000001, B00001111, B10111000, B11000000, B00000000, B00000000, 
  B00000000, B00000000, B00000000, B11100111, B11111111, B00000000, B00000000, B00000000, 
  B00000000, B00000000, B00000000, B00111100, B00111110, B00000000, B00000000, B00000000, 
  B00000000, B00000000, B00000000, B00001111, B11111000, B00000000, B00000000, B00000000, 
  B00000000, B00000000, B00000000, B00000111, B10100000, B00000000, B00000000, B00000000, 
  B00000000, B00000000, B00000000, B00000000, B10000000, B00000000, B00000000, B00000000, 
  
};


void setup(){
Serial.begin(9600);
for (int thisLed = 0; thisLed < ledCount; thisLed++) {
pinMode(ledPins[thisLed], OUTPUT);
    }
  display.begin(SSD1306_SWITCHCAPVCC);
  display.clearDisplay();
  display.drawBitmap(23,0,Logo1,64 ,32,WHITE);
  display.display();
}

void loop()
{
  int fsr_value = analogRead(fsr_pin); // 讀取FSR
  int led_value = map(fsr_value, 0, 1023, 0, 10); // 從0~1023映射到0~10
  
  Serial.println( fsr_value);
 
 

  
for (int thisLed = 0; thisLed < ledCount; thisLed++) {
  if (thisLed < led_value) {
   digitalWrite(ledPins[thisLed], HIGH);
   
  display.clearDisplay();
  display.drawBitmap(23,0,Logo1,64 ,32,WHITE);
  display.display();
    }
 else {
      digitalWrite(ledPins[thisLed], LOW);
      
  display.clearDisplay();
  display.drawBitmap(23,0,Logo,64 ,32,WHITE);
  display.display();
    }
  }

}
